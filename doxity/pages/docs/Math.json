{"fileName":"/contracts/internal/Math.sol","name":"Math","abi":[],"bin":"60606040523415600e57600080fd5b603580601b6000396000f3006060604052600080fd00a165627a7a72305820d65805da798f61a6875ed5a13c1e2e4b076e11172f844a95f906d3d7c12dbc050029","opcodes":"PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH1 0xE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x35 DUP1 PUSH1 0x1B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xd6 PC SDIV 0xda PUSH26 0x8F61A6875ED5A13C1E2E4B076E11172F844A95F906D3D7C12DBC SDIV STOP 0x29 ","source":"pragma solidity ^0.4.19;\nlibrary Math {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n\n        uint256 r = a + b;\n\n        assert(r >= a);\n\n        return r;\n    }\n\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\n        assert(a >= b);\n\n        return a - b;\n    }\n\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 r = a * b;\n\n        assert(a == 0 || r / a == b);\n\n        return r;\n    }\n\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n}","abiDocs":[]}
